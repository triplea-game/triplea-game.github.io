#!/bin/Hong Kong, Hong Kong
220.8
220.9
220.9
 jp Japan, Tokyo
1.2
1.2
1.3
 kr South Korea, Seoul
38.9
38.9
38.9
 sg Singapore, Singapore
1.6
1.7
1.8
 th Thailand, Bangkok
19.3
19.3
19.4
Europe
 ch Switzerland, Zurich
Unknown hostname
 de Germany, Munich
5.1
5.2
5.3
 es Spain, Madrid
Unknown hostname
 fr France, Roubaix
0.9
2.1
3.4
 it Italy, Milan
21.2
21.2
21.2
 lv Latvia, Riga
12.7
12.8
12.8
 nl Netherlands, Amsterdam
Checkpoint is down
 pl Poland, Warsaw
39.0
39.4
39.8
 ro Romania, Bucharest
24.2
24.3
24.4
 ru Russia, Moscow
30.5
31.0
31.5
 se Sweden, Stockholm
Checkpoint is down
 ua Ukraine, Kiev
Checkpoint is down
 uk United Kingdom, London
Checkpoint is down
North America
 ca Canada, Toronto
84.1
84.1
84.1
 us United States, Matawan
49.4
49.4
49.5

# Generates an URL used to display all merged PRs included with a specific
# release or all unreleased merged PRs.  This URL is intended to be embedded
# in the release notes.
#

readonly FALSE=1
readonly TRUE=0

declare -A MODEL=( [branch_name]=master )

main() {
  parse_args "$@" || exit 1

  if [[ -z ${MODEL[to_tag]} ]]; then
    format_unreleased_url
  else
    format_released_url
  fi
}

parse_args() {
  local -r getopt_long_options="branch-name:,from-tag:,to-tag:"
  local getopt_result
  getopt_result=$(getopt --options= --longoptions="$getopt_long_options" --name="$0" -- "$@")
  if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    print_usage
    return $FALSE
  fi

  eval set -- "$getopt_result"
  while true; do
    case "$1" in
      --branch-name)
        MODEL[branch_name]="$2"
        shift 2
        ;;
      --from-tag)
        MODEL[from_tag]="$2"
        shift 2
        ;;
      --to-tag)
        MODEL[to_tag]="$2"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "$0: programmer error: no case for option '$1'"
        return $FALSE
        ;;
    esac
  done

  if [[ $# -ne 0 ]]; then
    echo "$0: unexpected positional argument(s) '$@'"
    print_usage
    return $FALSE
  fi

  if [[ -z ${MODEL[from_tag]} ]]; then
    echo "$0: missing from tag"
    print_usage
    return $FALSE
  fi

  return $TRUE
}

print_usage() {
  echo "usage: $0 --from-tag=<from_tag> [--to-tag=<to_tag>] [--branch-name=<branch_name>]"
  echo
  echo "  from_tag:    The tag of the previous release."
  echo "  to_tag:      The tag of the current release."
  echo "  branch_name: The name of the release branch (default: master)."
  echo
  echo "If <to_tag> is specified, the generated URL will include all PRs"
  echo "merged between the date of <from_tag> and the date of <to_tag>"
  echo "(i.e. all merged PRs included in the release tagged <to_tag>)."
  echo
  echo "If <to_tag> is not specified, the generated URL will include all PRs"
  echo "merged since the date of <from_tag> (i.e. all merged PRs that have"
  echo "not yet been released since the release tagged <from_tag>)."
}

get_release_date() {
  local -r release_tag=$1
  curl \
      --silent \
      --show-error \
      --header "Accept: application/vnd.github.v3+json" \
      "https://api.github.com/repos/triplea-game/triplea/releases/tags/$release_tag" \
    | jq -r '.published_at'
}

format_released_url() {
  local -r encoded_branch_name=$(uri_encode "${MODEL[branch_name]}")
  local -r from_date=$(get_release_date "${MODEL[from_tag]}")
  local -r encoded_from_date=$(uri_encode "$from_date")
  local -r to_date=$(get_release_date "${MODEL[to_tag]}")
  local -r encoded_to_date=$(uri_encode "$to_date")
  echo "https://github.com/triplea-game/triplea/pulls?q=base%3A$encoded_branch_name+merged%3A$encoded_from_date..$encoded_to_date"
}

format_unreleased_url() {
  local -r encoded_branch_name=$(uri_encode "${MODEL[branch_name]}")
  local -r from_date=$(get_release_date "${MODEL[from_tag]}")
  local -r encoded_from_date=$(uri_encode "$from_date")
  echo "https://github.com/triplea-game/triplea/pulls?q=base%3A$encoded_branch_name+merged%3A%3E%3D$encoded_from_date"
}

uri_encode() {
  echo -n "$1" | jq -s -R -j @uri
}

main "$@"
